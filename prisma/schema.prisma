datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String   @id @default(cuid()) @map("_id")
  role     ROLE     @default(DONOR)
  fullname String
  phoneNum String   @unique
  selfie   String
  location Location
  email    String   @unique

  // donor specific
  tweets    Tweet[]
  bookmarks Application[] @relation("DonorBookmarks")
  donated   Application[] @relation("DonorDonated")
  followers Connection[]  @relation("followers")
  following Connection[]  @relation("following")

  // acceptor specific
  writtenApplicationId Application? @relation("Acceptor")

  // verifier specific
  verifiedApplications Application[] @relation("Verifier")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Connection {
  id   String @id @default(cuid()) @map("_id")
  from String
  to   String

  follower  User @relation("followers", fields: [to], references: [id])
  following User @relation("following", fields: [from], references: [id])

  @@unique([from, to])
  @@index([from])
}

model Application {
  id               String  @id @default(cuid()) @map("_id")
  authorId         String  @unique
  amount           Int
  reason           String
  status           STATUS
  hide             Boolean @default(false)
  rating           Int
  bookmarkedUserId String?
  verifierUserId   String?
  donatedUserId    String?

  Acceptor       User  @relation("Acceptor", fields: [authorId], references: [id], onDelete: Cascade)
  Verifier       User? @relation("Verifier", fields: [verifierUserId], references: [id]) // IMP: DON"T ALLOW VERIFIER ACCOUNT INFO TO GET DELETED FROM DB
  DonorBookmarks User? @relation("DonorBookmarks", fields: [bookmarkedUserId], references: [id])
  DonorDonated   User? @relation("DonorDonated", fields: [donatedUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tweet {
  id       String @id @default(cuid()) @map("_id")
  text     String
  authorId String

  Donor User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type Location {
  type        String  @default("Point") // Must be "Point" for geospatial queries
  coordinates Float[] // [longitude, latitude]
}

enum STATUS {
  CREATED
  DONATED
  VERIFIED
  BOOKMARKED
}

enum ROLE {
  ADMIN
  DONOR
  ACCEPTOR
  VERIFIER
}

// @updatedAt
// @unique
// @default(now())
// @@unique([name, age])
// @@index([email, name])
// @@id([email, name])
// ########################################################
// ##################### MANY TO MANY #####################
// ########################################################
// model User {
//   id           String @id @default(uuid())
//   writtenPosts Post[]
// }

// model Post {
//   id      String @id @default(uuid())
//   authors User[]
// }

// ########################################################
// ##################### ONE TO MANY ######################
// ########################################################
// model User {
//   id           String @id @default(uuid())
//   writtenPosts Post[]
// }

// model Post {
//   id       String @id @default(uuid())
//   authorId String
//   author   User   @relation(fields: [authorId], references: [id])
// }

// ########################################################
// #################### 2 ONE TO MANY #####################
// ########################################################
// model User {
//   id             String @id @default(uuid())
//   writtenPosts   Post[] @relation("WrittenPosts")
//   favouritePosts Post[] @relation("FavouritePosts")
// }

// model Post {
//   id          String  @id @default(uuid())
//   authorId    String
//   favouriteId String?
//   author      User    @relation("WrittenPosts", fields: [authorId], references: [id])
//   favourite   User?   @relation("FavouritePosts", fields: [favouriteId], references: [id])
// }

// ########################################################
// ###################### ONE TO ONE ######################
// ########################################################
// model User {
//   id   String @id @default(uuid())
//   post Post?
// }

// model Post {
//   id           String @id @default(uuid())
//   postAuthorId String @unique
//   author       User   @relation(fields: [postAuthorId], references: [id])
// }

// model User {
//   id            String @id @default(uuid())
//   writtenPostId String @unique
//   post          Post   @relation(fields: [writtenPostId], references: [id])
// }

// model Post {
//   id     String @id @default(uuid())
//   author User?
// }
